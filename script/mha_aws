#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use String::CamelCase qw/ camelize /;
use MHA::AWS;
use Pod::Usage;
use JSON;

my (
    $host, $ip, $port,
    $orig_master_host, $orig_master_ip, $orig_master_port,
    $new_master_host, $new_master_ip, $new_master_port, $new_master_password,
    $command, $ssh_user, $interface_name,
);
GetOptions(
    "host=s"                => \$host,
    "ip=s"                  => \$ip,
    "port=s"                => \$port,
    "interface_name=s"      => \$interface_name,
    "orig_master_host=s"    => \$orig_master_host,
    "orig_master_ip=s"      => \$orig_master_ip,
    "orig_master_port=s"    => \$orig_master_port,
    "new_master_host=s"     => \$new_master_host,
    "new_master_ip=s"       => \$new_master_ip,
    "new_master_port=s"     => \$new_master_port,
    "new_master_password=s" => \$new_master_password,
    "ssh_user=s"            => \$ssh_user,
    "command=s"             => \$command,
);
my $sub_command = $ARGV[0] or pod2usage();
my $class = sprintf("MHA::AWS::%s", camelize($sub_command));
eval "use $class;";
if ($@) {
    die "Can't load $class: $@";
}
if (!defined $interface_name) {
    die "--interface_name required";
}
my $app = $class->new(
    host             => $host,
    orig_master_host => $orig_master_host,
    new_master_host  => $new_master_host,
    interface_name   => $interface_name,
    ssh_user         => $ssh_user,
);
$app->init;
print JSON->new->pretty->encode($app->info);
$app->dispatch($command);

exit 0;

__END__

=pod

=head1 USAGE

    $ mha_aws [subcommand] --interface_name=[description] [... args passed by MHA]

    required arguments:
      --interface_name=[description of ENI for master VIP]

    subcommand:
      master_ip_failover
      master_ip_online_change
      shutdown

=cut
